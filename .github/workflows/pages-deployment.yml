name: GitHub Pages Deployment Check

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'

jobs:
  validate-web-interface:
    name: Validate Web Interface
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify required web files exist
        run: |
          echo "üîç Checking required web interface files..."

          REQUIRED_FILES=(
            "docs/index.html"
            "docs/styles.css"
            "docs/app.js"
            "docs/.nojekyll"
            "docs/README.md"
          )

          MISSING=0
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              MISSING=$((MISSING + 1))
            else
              echo "‚úÖ Found: $file"
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "‚ùå $MISSING required files missing"
            exit 1
          fi

          echo "‚úÖ All required web files present"

      - name: Validate HTML
        run: |
          echo "üîç Checking HTML syntax..."

          # Basic HTML validation (allow tags with attributes)
          if grep -q '</html>' docs/index.html && \
             grep -q '<head' docs/index.html && \
             grep -q '<body' docs/index.html; then
            echo "‚úÖ HTML structure valid"
          else
            echo "‚ùå HTML structure invalid"
            exit 1
          fi

          # Check for required meta tags
          if grep -q '<meta name="viewport"' docs/index.html && \
             grep -q '<meta name="description"' docs/index.html; then
            echo "‚úÖ Required meta tags present"
          else
            echo "‚ùå Missing required meta tags"
            exit 1
          fi

      - name: Validate CSS
        run: |
          echo "üîç Checking CSS syntax..."

          # Basic CSS validation - check for curly braces (multi-line aware)
          if grep -q '{' docs/styles.css && grep -q '}' docs/styles.css; then
            echo "‚úÖ CSS structure appears valid"
          else
            echo "‚ùå CSS structure may be invalid"
            exit 1
          fi

          # Check for required CSS variables
          if grep -q ':root {' docs/styles.css && \
             grep -q '\-\-primary-color:' docs/styles.css; then
            echo "‚úÖ CSS variables defined"
          else
            echo "‚ùå Missing CSS variables"
            exit 1
          fi

      - name: Validate JavaScript
        run: |
          echo "üîç Checking JavaScript syntax..."

          # Check for progressive enhancement structure
          if grep -q 'document.getElementById' docs/app.js && \
             grep -q 'function' docs/app.js && \
             grep -q 'addEventListener' docs/app.js; then
            echo "‚úÖ JavaScript structure valid"
          else
            echo "‚ùå JavaScript structure may be invalid"
            exit 1
          fi

          # Check that templates are pre-rendered in HTML (not JS)
          TEMPLATE_COUNT=$(grep -c 'data-jurisdiction=' docs/index.html || echo "0")
          if [ "$TEMPLATE_COUNT" -gt 5 ]; then
            echo "‚úÖ Templates pre-rendered in HTML ($TEMPLATE_COUNT templates)"
          else
            echo "‚ùå Templates may not be pre-rendered in HTML"
            exit 1
          fi

      - name: Check for broken GitHub URLs
        run: |
          echo "üîç Checking for broken GitHub URLs..."

          # Extract GitHub URLs from web files
          ERRORS=0
          grep -oP 'https://github\.com/[^"'\'']+' docs/*.{html,js,md} 2>/dev/null | while read -r url; do
            # Remove trailing quotes or slashes
            url=$(echo "$url" | sed 's/[">]$//')

            echo "Checking: $url"

            # Basic validation - should contain expected repo structure
            if [[ "$url" =~ github\.com/[^/]+/[^/]+/blob/main/.+ ]] || \
               [[ "$url" =~ github\.com/[^/]+/[^/]+/?$ ]]; then
              echo "‚úÖ Valid GitHub URL format"
            else
              echo "‚ö†Ô∏è Unusual GitHub URL: $url"
            fi
          done

          if [ $ERRORS -gt 0 ]; then
            echo "‚ö†Ô∏è Found $ERRORS questionable URLs"
            # Don't fail, just warn
          else
            echo "‚úÖ GitHub URLs appear valid"
          fi

      - name: Check responsive design elements
        run: |
          echo "üîç Checking for responsive design elements..."

          # Check for viewport meta tag
          if grep -q '<meta name="viewport"' docs/index.html; then
            echo "‚úÖ Viewport meta tag present"
          else
            echo "‚ùå Missing viewport meta tag (not mobile-friendly)"
            exit 1
          fi

          # Check for media queries in CSS
          if grep -q '@media' docs/styles.css; then
            echo "‚úÖ Media queries found (responsive CSS)"
          else
            echo "‚ö†Ô∏è No media queries found - may not be responsive"
          fi

      - name: Verify accessibility features
        run: |
          echo "üîç Checking accessibility features..."

          # Check for semantic HTML
          SEMANTIC_TAGS=("header" "nav" "main" "section" "footer" "article")
          MISSING_TAGS=0

          for tag in "${SEMANTIC_TAGS[@]}"; do
            if grep -q "<$tag" docs/index.html; then
              echo "‚úÖ Found semantic tag: <$tag>"
            else
              echo "‚ö†Ô∏è Missing semantic tag: <$tag>"
              MISSING_TAGS=$((MISSING_TAGS + 1))
            fi
          done

          # Check for ARIA labels
          if grep -q 'aria-label' docs/index.html; then
            echo "‚úÖ ARIA labels present"
          else
            echo "‚ö†Ô∏è No ARIA labels found"
          fi

          # Check for alt text on images (if any)
          if grep -q '<img' docs/index.html; then
            if grep '<img' docs/index.html | grep -v 'alt=' > /dev/null; then
              echo "‚ö†Ô∏è Images without alt text found"
            else
              echo "‚úÖ All images have alt text"
            fi
          else
            echo "‚úÖ No images to check for alt text"
          fi

      - name: Test JavaScript for syntax errors (basic)
        run: |
          echo "üîç Basic JavaScript syntax check..."

          # Check for common syntax errors
          if grep -E ';{2,}|function\s*\(|const\s+const' docs/app.js; then
            echo "‚ö†Ô∏è Potential JavaScript syntax issues"
          else
            echo "‚úÖ No obvious JavaScript syntax errors"
          fi

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check file sizes
        run: |
          echo "üìä Checking file sizes for performance..."

          # Check HTML size
          HTML_SIZE=$(stat -f%z docs/index.html 2>/dev/null || stat -c%s docs/index.html)
          if [ $HTML_SIZE -gt 100000 ]; then
            echo "‚ö†Ô∏è index.html is large: $HTML_SIZE bytes (>100KB)"
          else
            echo "‚úÖ index.html size acceptable: $HTML_SIZE bytes"
          fi

          # Check CSS size
          CSS_SIZE=$(stat -f%z docs/styles.css 2>/dev/null || stat -c%s docs/styles.css)
          if [ $CSS_SIZE -gt 50000 ]; then
            echo "‚ö†Ô∏è styles.css is large: $CSS_SIZE bytes (>50KB)"
          else
            echo "‚úÖ styles.css size acceptable: $CSS_SIZE bytes"
          fi

          # Check JS size
          JS_SIZE=$(stat -f%z docs/app.js 2>/dev/null || stat -c%s docs/app.js)
          if [ $JS_SIZE -gt 50000 ]; then
            echo "‚ö†Ô∏è app.js is large: $JS_SIZE bytes (>50KB)"
          else
            echo "‚úÖ app.js size acceptable: $JS_SIZE bytes"
          fi

          # Total size
          TOTAL_SIZE=$((HTML_SIZE + CSS_SIZE + JS_SIZE))
          echo "Total web assets: $TOTAL_SIZE bytes"

          if [ $TOTAL_SIZE -gt 200000 ]; then
            echo "‚ö†Ô∏è Total size over 200KB - may affect load time"
          else
            echo "‚úÖ Total size acceptable for fast loading"
          fi

      - name: Check for external dependencies
        run: |
          echo "üîç Checking for external dependencies..."

          # Check for external CSS/JS includes
          if grep -E 'href="https?://' docs/index.html | grep -v 'github.com' > /dev/null; then
            echo "‚ö†Ô∏è External CSS dependencies found"
            grep -E 'href="https?://' docs/index.html | grep -v 'github.com'
          else
            echo "‚úÖ No external CSS dependencies"
          fi

          if grep -E 'src="https?://' docs/index.html | grep -v 'github.com' > /dev/null; then
            echo "‚ö†Ô∏è External JS dependencies found"
            grep -E 'src="https?://' docs/index.html | grep -v 'github.com'
          else
            echo "‚úÖ No external JS dependencies"
          fi

  seo-check:
    name: SEO Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check SEO elements
        run: |
          echo "üîç Checking SEO elements..."

          # Title tag
          if grep -q '<title>' docs/index.html; then
            TITLE=$(grep -oP '<title>\K[^<]+' docs/index.html)
            echo "‚úÖ Title tag present: $TITLE"
          else
            echo "‚ùå Missing title tag"
            exit 1
          fi

          # Meta description
          if grep -q '<meta name="description"' docs/index.html; then
            echo "‚úÖ Meta description present"
          else
            echo "‚ùå Missing meta description"
            exit 1
          fi

          # Heading hierarchy
          if grep -q '<h1' docs/index.html; then
            H1_COUNT=$(grep -o '<h1' docs/index.html | wc -l | tr -d ' ')
            if [ $H1_COUNT -eq 1 ]; then
              echo "‚úÖ Exactly one H1 tag (good for SEO)"
            else
              echo "‚ö†Ô∏è Multiple H1 tags found ($H1_COUNT) - may affect SEO"
            fi
          else
            echo "‚ùå Missing H1 tag"
            exit 1
          fi

          # Canonical URL (optional but recommended)
          if grep -q '<link rel="canonical"' docs/index.html; then
            echo "‚úÖ Canonical URL set"
          else
            echo "‚ö†Ô∏è No canonical URL (consider adding)"
          fi

  deployment-simulation:
    name: Deployment Simulation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build and test
        run: |
          echo "üî® Simulating GitHub Pages deployment..."

          # Verify .nojekyll exists (required for proper serving)
          if [ -f "docs/.nojekyll" ]; then
            echo "‚úÖ .nojekyll file present (Jekyll disabled)"
          else
            echo "‚ùå Missing .nojekyll file"
            exit 1
          fi

          # Check that index.html is in root of docs/
          if [ -f "docs/index.html" ]; then
            echo "‚úÖ index.html in docs root"
          else
            echo "‚ùå index.html not in docs root"
            exit 1
          fi

          # Verify no Jekyll-specific files
          if [ -f "docs/_config.yml" ]; then
            echo "‚ö†Ô∏è Found _config.yml - Jekyll may process site"
          else
            echo "‚úÖ No Jekyll config (pure HTML/CSS/JS)"
          fi

      - name: Test local serving (quick)
        run: |
          echo "üåê Testing local serving..."

          cd docs

          # Start simple HTTP server in background
          python3 -m http.server 8000 &
          SERVER_PID=$!

          # Wait for server to start
          sleep 2

          # Test if index.html is served
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/)

          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Site serves successfully (HTTP $HTTP_CODE)"
          else
            echo "‚ùå Site failed to serve (HTTP $HTTP_CODE)"
            kill $SERVER_PID
            exit 1
          fi

          # Test if CSS loads
          CSS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/styles.css)
          if [ "$CSS_CODE" -eq 200 ]; then
            echo "‚úÖ CSS loads successfully"
          else
            echo "‚ùå CSS failed to load"
            kill $SERVER_PID
            exit 1
          fi

          # Test if JS loads
          JS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/app.js)
          if [ "$JS_CODE" -eq 200 ]; then
            echo "‚úÖ JavaScript loads successfully"
          else
            echo "‚ùå JavaScript failed to load"
            kill $SERVER_PID
            exit 1
          fi

          # Stop server
          kill $SERVER_PID
          echo "‚úÖ Local serving test passed"

  summary:
    name: Pages Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-web-interface, performance-check, seo-check, deployment-simulation]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "üìä GitHub Pages Deployment Check Summary"
          echo "========================================="
          echo ""
          echo "Web Interface Validation: ${{ needs.validate-web-interface.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"
          echo "SEO Check: ${{ needs.seo-check.result }}"
          echo "Deployment Simulation: ${{ needs.deployment-simulation.result }}"
          echo ""

          if [ "${{ needs.validate-web-interface.result }}" != "success" ] || \
             [ "${{ needs.deployment-simulation.result }}" != "success" ]; then
            echo "‚ùå Critical deployment checks failed"
            exit 1
          else
            echo "‚úÖ All critical deployment checks passed"
            echo "Site is ready for GitHub Pages deployment"
          fi
